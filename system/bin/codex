#!/usr/bin/env bash

# if first argument is -rc or --restart, stop the main process
if [[ "$1" == "-r" || "$1" == "--restart" || "$1" == "restart" ]]; then
    echo "///CODEX///: Restarting codex container..."

    rm -rf /tmp/*

    /etc/codex/mods.sh --quit

    rm -rf /tmp/*

    echo "Shutdown..."

    sleep 2
    shutdown -P 0
    exit 0
fi

if [[ "$1" == "-l" || "$1" == "--logs" || "$1" == "logs" ]]; then
    echo "///CODEX///: Logs:"
    journalctl -u codex
    exit 0
fi


# if first argument is -r or --fast-restart, restart the vscode process
if [[ "$1" == "-fr" || "$1" == "--fast-restart" || "$1" == "fast-restart" ]]; then
    echo "///CODEX///: Restarting codex vscode..."
    systemctl restart vscode
    exit 0
fi

# if first argument is -fd or --free-disk, free some disk space
if [[ "$1" == "-fd" || "$1" == "--free-disk" || "$1" == "free-disk" ]]; then
    echo "///CODEX///: Clear all codex logs..."
    rm -rf /codex/.codex/logs/*

    echo "///CODEX///: Clear tmp folder..."
    rm -rf /tmp/*

    echo "///CODEX///: Clear codeserver cache files..."
    rm -rf /codex/.codex/vscode/CachedExtensionVSIXs/*
    rm -rf /codex/.codex/vscode/User/Backups/*
    rm -rf /codex/.codex/vscode/User/workspaceStorage/*
    rm -rf /codex/.codex/vscode/User/customBuiltinExtensionsCache.json

    echo "///CODEX///: node_mods folder..."
    find /codex/main -name "node_mods" -type d -prune -print | xargs du -chs
    find /codex/old -name "node_mods" -type d -prune -print | xargs du -chs
    find /codex/test -name "node_mods" -type d -prune -print | xargs du -chs

    echo "///CODEX///: Wipe docker..."
    codexdd start
    codexdd swipe
    codexdd stop

    echo "///CODEX///: Clear apt cache files..."
    aptup
    sudo apt-get autoremove -y
    sudo apt-get clean
    sudo apt-get autoclean

    echo "///CODEX///: Wipe unused screens..."
    screen -wipe > /dev/null 2>&1

    echo "///CODEX///: Clear system logs..."
    sudo journalctl --rotate > /dev/null 2>&1
    sudo journalctl --vacuum-time=3s

    echo "///CODEX///: Finished!"
    exit 0
fi

# if first argument is -cc or --clear-cache, clear some cache
if [[ "$1" == "-cc" || "$1" == "--clear-cache" || "$1" == "clear-cache" ]]; then
    echo "///CODEX///: Clear all codex logs..."
    rm -rf /codex/.codex/logs/*

    echo "///CODEX///: Clear tmp folder..."
    rm -rf /tmp/*

    echo "///CODEX///: Clear codeserver cache files..."
    rm -rf /codex/.codex/vscode/CachedExtensionVSIXs/*
    rm -rf /codex/.codex/vscode/User/Backups/*
    rm -rf /codex/.codex/vscode/User/workspaceStorage/*
    rm -rf /codex/.codex/vscode/User/customBuiltinExtensionsCache.json

    echo "///CODEX///: Wipe docker..."
    codexdd clean

    echo "///CODEX///: Clear apt cache files..."
    sudo apt-get autoremove -y
    sudo apt-get clean
    sudo apt-get autoclean

    echo "///CODEX///: Wipe unused screens..."
    screen -wipe > /dev/null 2>&1

    echo "///CODEX///: Clear system logs..."
    sudo journalctl --rotate > /dev/null 2>&1
    sudo journalctl --vacuum-time=3s

    echo "///CODEX///: Finished!"
    exit 0
fi

ENABLED_MODS_PATH="/codex/.codex/enabled-mods"
OPTIONAL_MODS_PATH="/codex/.codex/mods"
LOGS_PATH="/etc/codex/logs"

if [[ "$1" == "-em" || "$1" == "--modon" || "$1" == "modon" ]]; then
    MOD_NAME=$2
    if [ -z "$2" ]; then
        echo "You need to define a mod"
        exit 1
    fi
    echo "///CODEX///: Enable mod '$MOD_NAME'..."
    rm -rf $ENABLED_MODS_PATH/$MOD_NAME.*.sh
    if [ -f $OPTIONAL_MODS_PATH/$MOD_NAME.env.sh ]; then
        ln -s \
            $OPTIONAL_MODS_PATH/$MOD_NAME.env.sh \
            $ENABLED_MODS_PATH/$MOD_NAME.env.sh
    fi
    if [ -f $OPTIONAL_MODS_PATH/$MOD_NAME.boot.sh ]; then
        ln -s \
            $OPTIONAL_MODS_PATH/$MOD_NAME.boot.sh \
            $ENABLED_MODS_PATH/$MOD_NAME.boot.sh
    fi
    if [ -f $OPTIONAL_MODS_PATH/$MOD_NAME.async.sh ]; then
        ln -s \
            $OPTIONAL_MODS_PATH/$MOD_NAME.async.sh \
            $ENABLED_MODS_PATH/$MOD_NAME.async.sh
    fi
    if [ -f $OPTIONAL_MODS_PATH/$MOD_NAME.bash.sh ]; then
        ln -s \
            $OPTIONAL_MODS_PATH/$MOD_NAME.bash.sh \
            $ENABLED_MODS_PATH/$MOD_NAME.bash.sh
    fi

    echo "Apply the changes on next codex restart!"
    echo "Restart via: 'codex -r'"
    exit 0
fi

if [[ "$1" == "-dm" || "$1" == "--modoff" || "$1" == "modoff" ]]; then
    MOD_NAME=$2
    if [ -z "$2" ]; then
        echo "You need to define a mod"
        exit 1
    fi
    echo "///CODEX///: Disable mod '$MOD_NAME'..."
    rm -rf $ENABLED_MODS_PATH/$MOD_NAME.*.sh

    echo "Apply the changes on next codex restart!"
    echo "Restart via: 'codex -r'"
    exit 0
fi

# if first argument is -l or --log, print a logfile
if [[ "$1" == "-l" || "$1" == "--log" || "$1" == "log" ]]; then
    LINES=$2
    if [ -z "$2" ]; then
        LINES="20"
    fi
    LOGNAME=$3
    if [ -z "$3" ]; then
        LOGNAME="boot"
    fi
    echo "///CODEX///: Logs of '/codex/.codex/logs/$LOGNAME_*.log' ..."
    if [[ "$LINES" == "all" ]]; then
        tail /codex/.codex/logs/$LOGNAME_*.log | cat -n
    else
        tail -n $LINES /codex/.codex/logs/$LOGNAME_*.log | cat -n
    fi

    echo "///CODEX///: Finished!"
    exit 0
fi

# if first argument is -w or --welcome, print welcome message and exit
if [[ "$1" == "-w" || "$1" == "welcome" ]]; then
    echo "                                                      "
    echo "                           ▄▄                         "
    echo "  ▄▄█▀▀▀█▄█              ▀███         ▀▀██      ██▀▀  "
    echo "▄██▀     ▀█                ██            ██    ██     "
    echo "██▀       ▀ ▄██▀██▄   ▄█▀▀███   ▄▄█▀████▀  ██ ██      "
    echo "██         ██▀   ▀██▄██    ██  ▄█▀    ██    ██        "
    echo "█▓▄        ██     ███▓█    █▓  ▓█▀▀▀▀▀▀▓▄  ██ ██      "
    echo "▀▓█▄     ▄▀██     ▓█▀▓█    █▓  ▓█▄       ██    ██     "
    echo "▓▓▓        ▓█     ▓▓▓▓▓    ▓▓  ▓▓▀▀▀▀▀▀▓▓██     ██    "
    echo "▒▓▓▒     ▓▀▓▓▓   ▓▓▓▀▒▓    ▓▒  ▒▓▓    ▒▓▓█       ▓▓▓  "
    echo "  ▒ ▒ ▒ ▒▓  ▒ ▒ ▒ ▓  ▒ ▒ ▒ ▓ ▒  ▒ ▒ ▒▒  ▓ ▒ ▒ ▒▓  ▒ ▒ " 
    echo "  ▒ ▒   ▒▒  ▒     ▒        ▓    ▒    ▒  ▒ ▒    ▒  ▒ ▒ "
    echo "  ▒      ▒        ▒        ▒    ▒       ▒         ▒   "
    echo "                  ▒        ▒   by Mohamed Hafeel      "
    echo " Welcome to CodeX          ▒      & Computer.com      "
    echo "                                                      "
    exit 0
fi

# if first argument is -rh or --hash
if [[ "$1" == "-rh" || "$1" == "---hash" || "$1" == "hash" ]]; then
    # print error if no second argument
    if [ -z "$2" ]; then
        echo "///CODEX///: No hash as second argument!"
        exit 1
    fi
    # print error if hash is shorter than 32 characters
    if [ ${#2} -lt 32 ]; then
        echo "///CODEX///: Hash is too short!"
        exit 1
    fi

    HASH=$2
    HASH=${HASH:0:64}

    printf "///CODEX///: Set new hash: \"%s\"\n" "$HASH"

    sed -i '/^hashed-password:/d' /codex/.codex/vscode-server.yaml
    echo -n "hashed-password: $HASH" >> /codex/.codex/vscode-server.yaml

    echo "///CODEX///: Hash set!"

    echo "///CODEX///: Codex is restarting..."
    echo "Please reload the page!"
    systemctl restart vscode
    exit 0
fi

PASSWORD="$2"
# if the first argument is -i then ask for a password in a prompt and save it in the first argument
if [[
    "$1" == "-i" ||
    "$1" == "--interactive" ||
    "$1" == "interactive" ||
    "$1" == "setpw" ||
    "$1" == "prompt"
]]; then
    PASSWORD=""
    while [ ${#PASSWORD} -lt 8 ]; do 
        echo "///CODEX///: Enter a password with min 8 letters:"
        read -s PASSWORD

        echo -n "///CODEX///: Enter password again:"
        read -s RE_PASSWORD
        echo
        if [ "$PASSWORD" != "$RE_PASSWORD" ]; then
            echo "///CODEX///: Passwords do not match! Try again!"
            echo "[CTRL] + [C] to abort"
            continue
        fi
    done
fi

# if first argument is -p, --password, -i or --interactive, set the password
if [[ 
    "$1" == "-p" || 
    "$1" == "--pass" || 
    "$1" == "pass" || 
    "$1" == "-i" || 
    "$1" == "--interactive" || 
    "$1" == "interactive" || 
    "$1" == "setpw" ||
    "$1" == "prompt" 
]]; then
    # print error if no $PASSWORD
    if [ -z "$PASSWORD" ]; then
        echo "///CODEX///: No password given!"
        exit 1
    fi
    # print error if password is shorter than 8 characters
    if [ ${#PASSWORD} -lt 8 ]; then
        echo "///CODEX///: Password is too short!"
        exit 1
    fi
    echo "///CODEX///: Set new password..."
    codex -rh "$(sha256sum2 "$PASSWORD")"

    echo "///CODEX///: New password set!"
    exit 0
fi

echo "              / / / / /"
echo "             C O D E X "
echo "            / / / / /  "
echo "                     v2"
echo "A Ubuntu 22.04 based vscode server docker image"

if [[ "$1" == "-h" || "$1" == "help" ]]; then
    echo ""
    echo "Usage: 'codex [OPTION]'"
    echo "It is not possible to use multiple options."
    echo "Options:"
    echo "  -h,  help:         print this help and exit"
    echo "  -l,  logs:         show codex service logs"
    echo "  -i,  interactive:  start interactive password prompt"
    echo "  -p,  pass <text>:  set password "
    echo "  -rh, hash <hash>:  saves a raw password hash"
    echo "  -w,  welcome:      print welcome message and exit"
    echo "  -fr, fast-restart: restart the vscode process"
    echo "  -r,  restart:      restart the codex container"
    echo "  -fd, free-disk:    free some disk space"
    echo "  -cc, clear-cache:  clear codex cache"
    echo "  -em, modon <mod>:  Enable a codex mod"
    echo "  -dm, modoff <mod>: Disable a codex mod"
    echo "  -l,  log <n> <ln>: print a logfile (example: boot, dockerd)"
else
    echo "Use 'codex -h' to get more informations about this command."
fi

echo ""
echo "   by Mohamed Hafeel"
echo "      & Computer.com"

